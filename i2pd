#!/usr/local/bin/perl -w

use Munin::Plugin;

my $ret = undef;
my $mode = undef;

if (! eval "require LWP::UserAgent;"){
	$ret = "LWP::UserAgent not found";
}

if ($0 =~ /tunnel$/) {
	$mode = 'tsr';
} elsif ($0 =~ /traffic$/) {
	$mode = 'traffic';
} elsif ($0 =~ /routers$/) {
	$mode = 'routers';
} elsif ($0 =~ /tunnels$/) {
	$mode = 'tunnels';
} else {
	$ret = "Unknown mode";
}

my $URL = exists $ENV{'url'} ? $ENV{'url'} : "http://localhost:7070/";

if (exists $ARGV[0] and $ARGV[0] eq "autoconf") {
	if ($ret){
	print "no ($ret)\n";
		exit 0;
	}

	my $ua = LWP::UserAgent->new(timeout => 30, agent => sprintf("munin/%s (libwww-perl/%s)", $Munin::Common::Defaults::MUNIN_VERSION, $LWP::VERSION));
	my $response = $ua->request(HTTP::Request->new('GET',$URL));

	unless ($response->is_success and $response->content =~ /I2P/im) {
		print "no (no i2p status on $URL)\n";
		exit 0;
	} else {
		print "yes\n";
		exit 0;
	}
}

if (exists $ARGV[0] and $ARGV[0] eq "config") {
	if ($mode eq 'tsr') {
		print "graph_title I2PD tunnel creation success rate\n";
		print "graph_args --base 1000 --lower-limit 0 --upper-limit 100\n";
		print "graph_category i2pd\n";
		print "graph_vlabel %\n";
		print "tsr.label Rate\n";
		print "tsr.draw  LINE\n";
	} elsif ($mode =~ /traffic/) {
		print "graph_title I2PD traffic\n";
		print "graph_args -l 0 --base 1024\n";
		print "graph_vlabel bytes\n";
		print "graph_category i2pd\n";
		print "rbytes.label In\n";
		print "rbytes.type DERIVE\n";
		print "rbytes.min 0\n";
		print "rbytes.draw AREA\n";
		print "rbytes.colour 00cc00\n";
		print "wbytes.label Out\n";
		print "wbytes.type DERIVE\n";
		print "wbytes.min 0\n";
		print "wbytes.draw LINE\n";
		print "wbytes.colour 0000cc\n";
	} elsif ($mode =~ /routers/) {
		print "graph_title I2PD routers\n";
		print "graph_args --base 1000 --lower-limit 0\n";
		print "graph_category i2pd\n";
		print "graph_vlabel routers\n";
		print "routers.label Routers\n";
		print "routers.draw  LINE\n";
		print "floodfills.label Floodfills\n";
		print "floodfills.draw  LINE\n";
		print "leasesets.label LeaseSets\n";
		print "leasesets.draw  LINE\n";
	} elsif ($mode =~ /tunnels/) {
		print "graph_title I2PD tunnels\n";
		print "graph_args --base 1000 --lower-limit 0\n";
		print "graph_category i2pd\n";
		print "graph_vlabel tunnels\n";
		print "client.label Client tunnels\n";
		print "client.draw LINE\n";
		print "transit.label Transit tunnels\n";
		print "transit.draw LINE\n";
	}

    exit 0;
}

my $ua = LWP::UserAgent->new(timeout => 30, agent => sprintf("munin/%s (libwww-perl/%s)", $Munin::Common::Defaults::MUNIN_VERSION, $LWP::VERSION));

my $response = $ua->request(HTTP::Request->new('GET',$URL));

if ($mode eq 'tsr') {
	if ($response->content =~ /<b>Tunnel creation success rate:<\/b>\s*(\d+)%/s) {
		print "tsr.value $1\n";
	} else {
		print "tsr.value U\n";
	}
} elsif ($mode =~ /traffic/) {
	if ($response->content =~ /<b>Received:<\/b>\s*([0-9.]+) (.)iB.*?<b>Sent:<\/b>\s*([0-9.]+) (.)iB/s) {
		my $r = MultModifier($1, $2);
		my $w = MultModifier($3, $4);

		print "rbytes.value $r\n";
		print "wbytes.value $w\n";
	} else {
		print "rbytes.value U\n";
		print "wbytes.value U\n";
	}
} elsif ($mode =~ /routers/) {
	if ($response->content =~ /<b>Routers:<\/b>\s*(\d+)\s+<b>Floodfills:<\/b>\s*(\d+)\s*<b>LeaseSets:<\/b>\s*(\d+)/s) {
		print "routers.value $1\n";
		print "floodfills.value $2\n";
		print "leasesets.value $3\n";
	} else {
		print "routers.value U\n";
		print "floodfills.value U\n";
		print "leasesets.value U\n";
	}
} elsif ($mode =~ /tunnels/) {
	if ($response->content =~ /<b>Client Tunnels:<\/b>\s*(\d+)\s+<b>Transit Tunnels:<\/b>\s*(\d+)/s) {
		print "client.value $1\n";
		print "transit.value $2\n";
	} else {
		print "client.value U\n";
		print "transit.value U\n";
	}
}

sub MultModifier {
	my ($value, $modifier) = @_;
	return $value * 1024.0 if ($modifier eq 'K');
	return $value * 1024.0 * 1024.0 if ($modifier eq 'M');
	return $value * 1024.0 * 1024.0 * 1024.0 if ($modifier eq 'G');
	return $value * 1024.0 * 1024.0 * 1024.0 * 1024.0 if ($modifier eq 'T');
}
