#!/usr/bin/env perl
#
# Copyright (c) 2015 Dmitry Marakasov <amdmi3@amdmi3.ru>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

#
# Munin plugin for poudriere monitoring
# See https://github.com/AMDmi3/munin-plugins
#

use strict;
use warnings;
use JSON::XS;
use Data::Dumper;
use File::Basename;

my $BUILD;
$BUILD = $1 if (basename($0) =~ /^poudriere_(.*)$/);

die "Build not defined; perhaps you forgot to name the plugin as poudriere_<buildname>?" unless defined $BUILD;

my $POUDRIERE_DIR = '/usr/local/poudriere';
my $POUDRIERE_LOGS_DIR = "$POUDRIERE_DIR/data/logs/bulk";

if (defined $ARGV[0] && $ARGV[0] eq 'autoconf') {
	if ( -d $POUDRIERE_DIR ) {
		print "yes\n";
	} else {
		print "no\n";
	}
	exit 0
} elsif (defined $ARGV[0] && $ARGV[0] eq 'suggest') {
	opendir(BUILDS, $POUDRIERE_LOGS_DIR) || die "Cannot open $POUDRIERE_LOGS_DIR";
	my @builds;
	while (readdir BUILDS) {
		next if ($_ =~ /^\./);
		next if (! -d "$POUDRIERE_LOGS_DIR/$_");
		push @builds, $_;
	}
	closedir(BUILDS);
	print join "\n", sort @builds;
} elsif (defined $ARGV[0] && $ARGV[0] eq 'config') {
	print <<_END;
graph_title Poudriere ports build status ($BUILD)
graph_args -l 0 --base 1000
graph_vlabel ports
graph_scale no
graph_category ports
graph_info This graph shows poudriere ports build status
built.label Built
built.min 0
built.draw AREA
built.colour 00cc00
failed.label Failed
failed.min 0
failed.draw STACK
failed.colour e00000
skipped.label Skipped
skipped.min 0
skipped.draw STACK
skipped.colour cc6633
ignored.label Ignored
ignored.min 0
ignored.draw STACK
ignored.colour ff9900
remaining.label Remaining
remaining.min 0
remaining.draw STACK
remaining.colour e3e3e3
queued.label Total queued
queued.min 0
queued.colour aaaaaa
queued.draw LINE0
_END
} else {
	open(JSON, '<', "/usr/local/poudriere/data/logs/bulk/$BUILD/.data.json") || die "Cannot open json data";
	my $data;
	while(<JSON>) {
		$data .= $_;
	}
	close(JSON);

	my $json = decode_json($data);
	my $build = $json->{builds}->{$json->{builds}->{latest}};

	if ($build->{status} !~ /^stopped/) {
		print "queued.value $build->{stats}->{queued}\n";
		print "built.value $build->{stats}->{built}\n";
		print "failed.value $build->{stats}->{failed}\n";
		print "skipped.value $build->{stats}->{skipped}\n";
		print "ignored.value $build->{stats}->{ignored}\n";
		my $remaining = $build->{stats}->{queued} - $build->{stats}->{built} - $build->{stats}->{failed} - $build->{stats}->{skipped} -  $build->{stats}->{ignored};
		print "remaining.value $remaining\n";
	} else {
		print "queued.value 0\n";
	}
}
